<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4-SNAPSHOT 3e4e5d8">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BZT Generated Test Plan" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NotestoFinancials_ReportDefaults_API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <stringProp name="ThreadGroup.start_time"></stringProp>
        <stringProp name="ThreadGroup.end_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="UserName" elementType="Argument">
              <stringProp name="Argument.name">UserName</stringProp>
              <stringProp name="Argument.value">FDSQAR_C</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SerialNumber" elementType="Argument">
              <stringProp name="Argument.name">SerialNumber</stringProp>
              <stringProp name="Argument.value">493663</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Override" elementType="Argument">
              <stringProp name="Argument.name">Override</stringProp>
              <stringProp name="Argument.value">pshukla_fred_dimitry_nto_lh2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">${__P(Stage,QA)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Base" elementType="Argument">
              <stringProp name="Argument.name">Base</stringProp>
              <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir().split(&quot;(?i)spec&quot;)[0]+&quot;Config/&quot;;)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Token" elementType="Argument">
              <stringProp name="Argument.name">Token</stringProp>
              <stringProp name="Argument.value">${__P(Token)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">dkrilov</stringProp>
              <stringProp name="Authorization.password">Stayin45</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${Base}${Environment}.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">URL</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="Cache" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookies" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">false</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="user_defined" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lima_Session_ID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">${UserName}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="serial" elementType="HTTPArgument">
                <stringProp name="Argument.name">serial</stringProp>
                <stringProp name="Argument.value">${SerialNumber}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">lima-staging.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api-lima/credentials</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">0</stringProp>
          <stringProp name="HTTPSampler.response_timeout">0</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">False</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inhouse" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">otp-inhouse.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">lima/ticket/kerberos/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-created" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-created</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Created: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-expiration" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-expiration</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Expiration: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-usertype" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-usertype</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Usertype: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-username" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-username</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Username: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-serial" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-serial</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Serial: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-userstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-userstate</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Userstate: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-orginalusername" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-orginalusername</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Original-Username: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-orginalserial" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-orginalserial</stringProp>
            <stringProp name="RegexExtractor.regex">X-Lima-Original-Serial: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lima-dsa1024" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">lima-dsa1024</stringProp>
            <stringProp name="RegexExtractor.regex">X-Limasig-Dsa1024: (.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Caccess" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="action" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">action</stringProp>
                <stringProp name="Argument.value">Submit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="serialNumber" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">serialNumber</stringProp>
                <stringProp name="Argument.value">${SerialNumber}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="caccessCodes" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">caccessCodes</stringProp>
                <stringProp name="Argument.value">97,96,95H,95E,93,92,91H,91,89,88,87,85,52,29,27,22,13AQ,11AQ,09T03,09T02,09T00,09Q21,09Q13,09Q02,09Q01,09P06,09P06,09P05,09P05,09P04,09P04,09P03,09P02,09P01,09P00,09O29,09O28,09O27,09O27,09O25,09O24,09O24,09O23,09O23,09O22,09O22,09O21,09O21,09O20,09O20,09O18,09O18,09O15,09O15,09O14,09O13,09O11,09O11,09O10,09O10,09O09,09O09,09O08,09O08,09O07,09O06,09O06,09O05,09O04,09O04,09O03,09O03,09O02,09O02,09O01,09O00,09O00,09M42,09M41,09M40,09M18,09M17,09M16,09M00,09L37,09L36,09L35,09L34,09L33,09L33,09L32,09L31,09L30,09L29,09L28,09L27,09L26,09L25,09L24,09L23,09L22,09L21,09L20,09L19,09L18,09L17,09L16,09L15,09L14,09L13,09L12,09L11,09L10,09L09,09L08,09L07,09L07,09L06,09L05,09L04,09L03,09L02,09L01,09F13,09F12,09F11,09F10,09F09,09F08,09F07,09F06,09F05,09F04,09F03,09F02,09F01,09F00,09E11,09E10,09E09,09E08,09E07,09E06,09E05,09E04,09E03,09E02,09E01,09E00,09D01,09D00,09CR3,09CR2,09CR1,09B33,09B32,09B31,09B29,09B28,09B27,09B26,09B25,09B24,09B23,09B22,09B20,09B19,09B18,09B15,09B14,09B13,09B12,09B11,09B10,09B09,09B08,09B07,09B06,09B05,09B04,09B03,09B02,09B01,09AV2,09AV1,09AV0,09A99,09A98,09A97,09A96,09A95,09A94,09A93,09A92,09A91,09A90,09A89,09A88,09A87,09A86,09A85,09A84,09A83,09A82,09A81,09A80,09A79,09A78,09A77,09A76,09A75,09A74,09A73,09A72,09A71,09A70,09A69,08M61,08M52,08AQ,07CDS,07,06M25,06CDX,06AQ,05LC1,05ETP,05CDS,04CDX,04CDX,04CDS,04AQ,04AMB,03TXU,03SP6,03SP1,03M74,03M73,03M72,03M71,03M70,03CAL,03AQ,03AMB,02RUS,02RPT,02RPA,02RA1,02PAB,02NPO,02MSM,02F46,02F32,02F30,02F26,02ETF,02DRG,02CRV,02CAL,02BPM,02BDI,02AXP,02API,02AMB,02AEQ,02AEF,02,01WEB,01TNW,01STU,01STS,01STE,01STB,01STA,01SIM,01SID,01SHW,01SAS,01RUS,01RPT,01RPC,01RPA,01RNS,01RIC,01RBI,01PTW,01PS3,01PRU,01PMP,01PIB,01PBO,01PAW,01PAG,01OMW,01MKW,01MIW,01MFR,01MER,01LSW,01LFI,01ISW,01IS2,01IS1,01IRW,01INW,01IGM,01FUK,01FTW,01FNW,01FEU,01FES,01FEG,01FEA,01FDE,01F46,01F08,01EXP,01ETP,01EMT,01ED1,01ECW,01ECC,01DTW,01DBW,01CSW,01CNN,01CEW,01CCE,01CAL,01BBW,01ARE,01AQ,01AN1,01AMP,01AML,01AMI,01AMB,01AFG,01AFE,01AFA,00Z21,00Z20,00Z19,00Z18,00Z17,00Z16,00Z14,00Z13,00Z12,00Z11,00Z10,00Z09,00Z08,00Z07,00Z06,00Z05,00Z04,00Z03,00Z02,00Z01,00XUD,00XTR,00XSD,00XPS,00XIT,00XFD,00XED,00WSM,00WSL,00WSD,00WSA,00WS,00WRP,00WOD,00WMR,00WMA,00WM1,00WIR,00WID,00WI2,00WEH,00WE,00WAP,00WAA,00VWP,00VSD,00VRD,00VRA,00VPM,00VID,00UWU,00UWI,00UWH,00UWF,00UWE,00UWD,00UWC,00UWB,00USD,00URD,00UPO,00UOI,00UOB,00UNU,00UNH,00UNF,00UNE,00UND,00UNA,00UKW,00UKI,00UBS,00UBI,00TXR,00TXH,00TXD,00TXC,00TWT,00TWD,00TWA,00TVW,00TSU,00TSU,00TSP,00TSL,00TSK,00TSD,00TS2,00TS1,00TRO,00TRL,00TRC,00TQS,00TQR,00TQD,00TPD,00TOD,00TNT,00TMR,00TLL,00TLI,00TLD,00TLB,00TLA,00TKY,00TKS,00TKQ,00TKH,00TKE,00TK,00THD,00TFI,00TFD,00TEX,00TE6,00TE5,00TE4,00TE3,00TE2,00TE1,00TDY,00TDT,00TDS,00TDN,00TDD,00TCS,00TCS,00TCA,00TAD,00SYI,00SYB,00SY4,00SY2,00SY1,00SXI,00SXD,00SWD,00SWA,00SUD,00STX,00STU,00STP,00STG,00STE,00SSP,00SSL,00SSE,00SSB,00SSA,00SS,00SRX,00SRN,00SR8,00SR1,00SQP,00SQ4,00SQ0,00SPZ,00SPY,00SPX,00SPV,00SPU,00SPT,00SPS,00SPR,00SPO,00SPJ,00SPF,00SPD,00SPC,00SPA,00SP7,00SP1,00SOW,00SOS,00SOI,00SNW,00SNL,00SNA,00SMW,00SMT,00SMP,00SMI,00SMH,00SME,00SMB,00SLF,00SLD,00SIT,00SIR,00SIP,00SID,00SIC,00SIA,00SI2,00SHD,00SGX,00SGS,00SGI,00SGF,00SGD,00SGA,00SG1,00SFZ,00SFL,00SFF,00SFD,00SEO,00SEC,00SEA,00SDR,00SDP,00SDN,00SDI,00SDE,00SDA,00SCS,00SCD,00SC,00SBX,00SBT,00SBL,00SBI,00SBA,00SB8,00SB2,00SB1,00SAU,00SAS,00SAD,00SAC,00S05,00RZZ,00RX2,00RX1,00RUZ,00RUS,00RUP,00RUI,00RUG,00RUD,00RUC,00RTT,00RTM,00RTH,00RTD,00RSS,00RSQ,00RSN,00RSI,00RSH,00RSD,00RRT,00RRQ,00RR8,00RR6,00RR5,00RR1,00RQT,00RQ,00RPZ,00RPY,00RPU,00RPT,00RPS,00RPM,00RPL,00RPL,00RPF,00RPD,00RP9,00RP6,00RP5,00RP4,00RP3,00RP2,00RP1,00ROD,00RNM,00RNF,00RNE,00RND,00RNB,00RNA,00RMF,00RMD,00RMC,00RM,00RIR,00RIP,00RIC,00RGR,00RGL,00RGH,00RFN,00REU,00REQ,00REM,00REA,00RDD,00RD3,00RD2,00RD1,00RCU,00RCT,00RCI,00RCF,00RBD,00RAW,00RAU,00RAQ,00RAP,00RAN,00RAI,00RAB,00RAA,00RA3,00RA2,00RA1,00R50,00R2X,00R25,00R1X,00R04,00QSS,00QRS,00QRD,00QP1,00QNS,00QMM,00QLD,00QAM,00QAM,00Q42,00PWM,00PWM,00PWB,00PW6,00PW5,00PW4,00PW3,00PW2,00PVW,00PV2,00PV,00PUM,00PUB,00PTG,00PTB,00PSZ,00PSW,00PST,00PSP,00PSN,00PSM,00PSE,00PSD,00PS2,00PRZ,00PRS,00PRP,00PRM,00PRE,00PRC,00PRA,00PQT,00PPW,00PPC,00PPB,00POX,00POU,00POT,00POR,00POP,00PON,00POK,00POJ,00POI,00POH,00POG,00POF,00POE,00POD,00POC,00POB,00POA,00PO,00PNT,00PMZ,00PMW,00PMT,00PMS,00PMR,00PMP,00PM1,00PLD,00PIP,00PIB,00PHD,00PGU,00PF4,00PF3,00PF2,00PF1,00PEV,00PED,00PEC,00PE1,00PE0,00PDZ,00PDW,00PDL,00PDH,00PDA,00PCW,00PCV,00PCU,00PCR,00PCH,00PCD,00PC,00PBW,00PBM,00PBD,00PBC,00PB2,00PAZ,00PAX,00PAV,00PAO,00PAF,00PAE,00PAA,00PA3,00PA2,00PA1,00P2P,00P1J,00OXD,00OSF,00OSF,00OSD,00OSB,00OS2,00ORW,00ORR,00ORN,00ORM,00ORE,00ORA,00OPS,00OPR,00OPI,00OPD,00ONS,00OMX,00OMS,00OMN,00OMB,00OAM,00NZX,00NZD,00NYS,00NYI,00NUP,00NTS,00NTS,00NTD,00NSE,00NSD,00NRN,00NRI,00NPS,00NOB,00NMD,00NM,00NLD,00NKD,00NK9,00NIQ,00NIM,00NIA,00NGN,00NGD,00NFI,00NFD,00NES,00NED,00NDG,00NDD,00NCA,00NBR,00NBD,00NAS,00N20,00N04,00N00,00MXD,00MWC,00MVG,00MVE,00MVA,00MUS,00MUP,00MUN,00MUH,00MUD,00MTZ,00MTS,00MTP,00MTN,00MTM,00MTD,00MTA,00MSZ,00MSY,00MSV,00MSS,00MSI,00MSC,00MSA,00MS6,00MS4,00MS3,00MS2,00MRD,00MR2,00MR1,00MPP,00MPO,00MPI,00MPE,00MPA,00MOR,00MOG,00MOF,00MOE,00MOC,00MNZ,00MNY,00MNW,00MNV,00MNU,00MNT,00MNS,00MNS,00MNR,00MNQ,00MNP,00MNO,00MNN,00MNM,00MNL,00MNK,00MNJ,00MNI,00MNH,00MNG,00MNF,00MNE,00MND,00MNC,00MNB,00MN6,00MN4,00MN3,00MN0,00MMM,00MMI,00MME,00MMD,00MMC,00MMA,00MM,00ML1,00MIR,00MID,00MI7,00MH2,00MH1,00MGT,00MG5,00MG3,00MG2,00MG1,00MFN,00MFD,00MEU,00MER,00MEM,00MEI,00MDY,00MDU,00MDT,00MDP,00MDO,00MDF,00MDD,00MDC,00MD6,00MD0,00MCS,00MCR,00MCI,00MCG,00MCD,00MC3,00MC2,00MC1,00MBR,00MBM,00MBL,00MBI,00MBC,00MAY,00MAS,00M95,00M90,00M85,00M80,00M75,00M70,00M51,00M3B,00LWC,00LVE,00LVD,00LUK,00LUD,00LTA,00LSS,00LSN,00LSA,00LRT,00LPS,00LPP,00LPF,00LPD,00LP2,00LP1,00LOS,00LOE,00LOD,00LMS,00LMF,00LLL,00LLD,00LLA,00LIT,00LIL,00LID,00LHB,00LGG,00LGE,00LGA,00LFR,00LFI,00LEV,00LEF,00LEC,00LDF,00LDD,00LCH,00LBU,00LBU,00LBO,00LBM,00LBG,00LBE,00LBE,00LBD,00LBA,00LBA,00LB4,00LB3,00LB3,00LB2,00LB1,00KTD,00KSS,00KSD,00KRT,00KRD,00KRC,00KOD,00KBD,00JSN,00JSD,00JPG,00JPC,00JPA,00JP6,00JP4,00JP1,00JMB,00JKD,00JGN,00JFI,00JCN,00JAM,00JAD,00IXU,00IXI,00IXE,00ITX,00ITW,00ITF,00ITA,00ISP,00ISI,00ISD,00ISC,00IS2,00IRS,00IRJ,00IRC,00IRA,00IR4,00IR3,00IR2,00IQJ,00IQC,00IQA,00IQ4,00IQ3,00IQ2,00IPO,00IPH,00IPD,00IMT,00IMQ,00IML,00IMF,00IMA,00IM2,00IM1,00IM0,00ILD,00IID,00II,00IH,00IGM,00IGA,00IFF,00IFC,00IEO,00IEC,00IEA,00IE,00IDP,00IDJ,00IDI,00IDC,00IDA,00ID6,00ID5,00ID4,00ID3,00ID2,00ID1,00ICZ,00ICX,00ICU,00ICT,00ICS,00ICP,00ICI,00ICH,00ICH,00ICF,00ICE,00ICD,00ICC,00ICB,00IBX,00IBN,00IBM,00IBJ,00IBI,00IBE,00IBC,00IBB,00I2J,00I2C,00I2A,00I24,00I23,00I22,00HXD,00HVI,00HVC,00HUG,00HSX,00HSM,00HSL,00HSJ,00HSI,00HSH,00HSE,00HSB,00HSA,00HS9,00HS8,00HS7,00HS6,00HS5,00HS4,00HS3,00HS2,00HS1,00HKE,00HKD,00HFX,00HFP,00HFI,00HFD,00HBD,00HB6,00HB4,00GSA,00GPW,00GPS,00GPR,00GPD,00GPB,00GPA,00GLI,00GI6,00GI5,00GI4,00GI2,00GH4,00GH2,00GFD,00GF1,00GDR,00FYC,00FXX,00FXD,00FXD,00FWI,00FWD,00FW1,00FUT,00FUN,00FTV,00FTT,00FTG,00FTD,00FTC,00FT6,00FT5,00FT0,00FSW,00FSE,00FSD,00FS3,00FS2,00FS1,00FRV,00FRS,00FRN,00FRM,00FRG,00FRC,00FRB,00FR1,00FPQ,00FPH,00FPE,00FPD,00FPC,00FPA,00FOT,00FOS,00FOF,00FNI,00FNB,00FN,00FMZ,00FMZ,00FMX,00FMS,00FMQ,00FMM,00FML,00FMF,00FMC,00FLD,00FIT,00FIS,00FIR,00FIO,00FIL,00FIB,00FIA,00FI3,00FHP,00FHJ,00FHH,00FGV,00FGU,00FGT,00FGP,00FGL,00FGB,00FGA,00FG2,00FFW,00FFG,00FFF,00FFA,00FF2,00FEU,00FET,00FES,00FER,00FEQ,00FEP,00FEO,00FEO,00FEF,00FEE,00FEC,00FEB,00FDW,00FDC,00FDB,00FCR,00FCO,00FCM,00FCM,00FCB,00FC1,00FC0,00FBG,00FB2,00FAR,00FAD,00FAB,00FA4,00FA2,00EXX,00EXT,00EXP,00EXL,00EXD,00EXC,00EWT,00EW1,00EVU,00EVS,00EVP,00EVK,00EVJ,00EVG,00EVE,00EVD,00EVC,00EVA,00EUR,00EUP,00EUD,00EU,00ETP,00ETF,00ETD,00ERR,00ERM,00ERI,00ERA,00EOD,00EME,00ELL,00EIU,00EID,00EI6,00EI5,00EI4,00EI3,00EI2,00EI1,00EI0,00EFI,00EEK,00EED,00EEC,00EDW,00EDS,00EDN,00EDJ,00EDD,00ED4,00ED3,00ED2,00ED1,00ECX,00ECU,00ECO,00ECI,00ECH,00ECD,00ECC,00ECA,00EC4,00EC3,00EC2,00EC1,00EC,00EBD,00EB2,00E95,00E90,00E85,00DZH,00DWJ,00DWE,00DWA,00DVS,00DUK,00DUD,00DU1,00DTW,00DTS,00DTR,00DTP,00DTO,00DTN,00DTL,00DTD,00DT6,00DT5,00DT4,00DT3,00DT2,00DT1,00DSW,00DSV,00DSR,00DSO,00DSN,00DSM,00DSF,00DSD,00DSC,00DSB,00DSA,00DS8,00DS1,00DRN,00DRM,00DRL,00DRG,00DRE,00DRD,00DRC,00DRB,00DRA,00DR9,00DR8,00DR7,00DR6,00DR5,00DR4,00DR3,00DR2,00DR1,00DPT,00DPR,00DPN,00DPL,00DPI,00DPG,00DPA,00DOU,00DOT,00DOI,00DNF,00DNB,00DMX,00DMW,00DMT,00DMS,00DMP,00DMN,00DMK,00DMI,00DMG,00DMC,00DMB,00DLK,00DLB,00DJT,00DJS,00DJP,00DJN,00DJM,00DJI,00DJF,00DJA,00DJ5,00DJ4,00DJ3,00DJ2,00DJ1,00DJ,00DIT,00DIL,00DID,00DIB,00DGZ,00DGV,00DGU,00DGS,00DGR,00DGQ,00DGP,00DGN,00DGM,00DGM,00DGI,00DGG,00DGF,00DGC,00DGB,00DGA,00DFM,00DFF,00DEW,00DES,00DER,00DEQ,00DEM,00DEC,00DEB,00DDZ,00DDV,00DDR,00DDQ,00DDO,00DDN,00DDM,00DDL,00DDK,00DDJ,00DDI,00DDH,00DDG,00DDF,00DDE,00DDD,00DDC,00DDB,00DD9,00DD8,00DD7,00DD6,00DD5,00DD4,00DD3,00DD2,00DD1,00DCX,00DCS,00DCM,00DCE,00DCD,00DCA,00DBT,00DBS,00DBL,00DBA,00DAN,00DAG,00DAE,00DAB,00DA9,00DA9,00DA8,00D95,00D90,00D85,00D80,00D75,00D70,00D30,00CYD,00CXD,00CX9,00CWL,00CTD,00CSN,00CRD,00CRB,00CRA,00CPT,00CPP,00CPN,00CP4,00CP3,00CP2,00COQ,00COP,00CON,00COM,00COL,00COK,00COJ,00COH,00COG,00COF,00COE,00COD,00COC,00COB,00CO9,00CO8,00CO7,00CO5,00CO4,00CO3,00CO2,00CO1,00CNW,00CNS,00CNP,00CNI,00CNH,00CNG,00CNC,00CNA,00CN2,00CN1,00CMM,00CMD,00CMB,00CM1,00CLT,00CLS,00CLP,00CLO,00CLI,00CLE,00CLD,00CJ8,00CJ7,00CJ6,00CJ5,00CJ4,00CJ3,00CJ2,00CIS,00CIP,00CIE,00CID,00CHR,00CHH,00CHD,00CGS,00CGM,00CGL,00CEM,00CEH,00CED,00CE,00CDS,00CDD,00CCN,00CCF,00CCD,00CC1,00CBS,00CBI,00CBD,00CB1,00CB0,00CB,00CAV,00CAV,00C95,00C94,00C93,00C92,00C91,00C90,00C8D,00C79,00C78,00C77,00C76,00C75,00C74,00C73,00C72,00C71,00BZH,00BZC,00BWM,00BWH,00BWC,00BVD,00BUH,00BUC,00BTW,00BTH,00BTC,00BSH,00BSD,00BSC,00BSA,00BS3,00BS2,00BS1,00BRL,00BRF,00BRD,00BPS,00BPM,00BPA,00BOD,00BO5,00BO4,00BO3,00BO2,00BO1,00BNP,00BNI,00BNH,00BNC,00BMV,00BMT,00BMS,00BMH,00BME,00BMD,00BMC,00BM1,00BLK,00BLH,00BLC,00BKH,00BKC,00BJZ,00BJY,00BJY,00BJX,00BJX,00BJH,00BJC,00BIX,00BIT,00BIH,00BIC,00BHH,00BHC,00BH3,00BGH,00BGC,00BFT,00BFN,00BFH,00BFC,00BF3,00BES,00BEO,00BEL,00BEH,00BED,00BEC,00BE3,00BE1,00BDH,00BDC,00BCH,00BCC,00BBH,00BBC,00BB6,00BB5,00BAL,00BAH,00BAC,00B9O,00B9M,00B9L,00B9K,00B9J,00B9I,00B9E,00B9E,00B9D,00B9C,00B9B,00B7R,00B4R,00B4Q,00B4P,00B4O,00B4N,00B4M,00B4L,00B4K,00B4J,00B4I,00B4H,00B4G,00B4F,00B4E,00B4D,00B4C,00B4B,00B4A,00B3U,00B3T,00B3S,00B3R,00B3Q,00B3P,00B3O,00B3N,00B3M,00B3L,00B3K,00B3J,00B3I,00B3H,00B3G,00B3F,00B3E,00B3D,00B3C,00B3B,00B3A,00B2T,00B2R,00B2Q,00B2P,00B2O,00B2N,00B2M,00B2L,00B2K,00B2J,00B2I,00B2H,00B2G,00B2F,00B2E,00B2D,00B2C,00B2B,00B2A,00B1R,00B1Q,00B1P,00B1O,00B1N,00B1M,00B1L,00B1K,00B1J,00B1I,00B1H,00B1G,00B1F,00B1E,00B1D,00B1C,00B1B,00B1A,00B0U,00B04,00AXP,00AXF,00AWP,00AWG,00AWF,00AWB,00AWA,00AV,00AUI,00AUE,00AU,00ATZ,00ATW,00ATL,00ATE,00AT9,00AT4,00AT3,00ASX,00AST,00ASA,00AS6,00AS5,00AS3,00AS1,00ARW,00ARP,00ARO,00ARJ,00ARI,00ARH,00ARF,00ARE,00ARD,00ARC,00ARB,00ARA,00AR9,00AR8,00AR7,00AR6,00AR5,00AR4,00AR3,00AR2,00AR1,00APS,00APP,00APO,00APM,00APL,00API,00APG,00APA,00AOL,00ANM,00ANL,00AND,00ANA,00AMR,00AMO,00AMN,00AMM,00AMD,00AM9,00AM8,00AM5,00AM4,00AM3,00AM2,00AM1,00ALD,00AL2,00AL1,00AKM,00AKL,00AID,00AHD,00AGO,00AGG,00AG3,00AG2,00AFI,00AFD,00AEZ,00AEY,00AEX,00AEW,00AEV,00AEU,00AET,00AES,00AER,00AEQ,00AEP,00AEO,00AEN,00AEM,00AEL,00AEK,00AEJ,00AEI,00AEH,00AEG,00AEF,00AEE,00AED,00AEC,00AEB,00AEA,00ADC,00AD2,00AD1,00ACW,00ACF,00ACD,00ABI,00ABH,00ABG,00ABF,00ABE,00ABD,00ABC,00ABB,00A4D,00A07,00A01,004SC,002BC,001PV,001DC,001BC,000SR,000SP,000FB</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">is.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">us-ascii</stringProp>
          <stringProp name="HTTPSampler.path">/caccess/Handlers/ConfigHandler.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-lima-created" elementType="Header">
                <stringProp name="Header.name">x-lima-created</stringProp>
                <stringProp name="Header.value">${lima-created}</stringProp>
              </elementProp>
              <elementProp name="x-lima-expiration" elementType="Header">
                <stringProp name="Header.name">x-lima-expiration</stringProp>
                <stringProp name="Header.value">${lima-expiration}</stringProp>
              </elementProp>
              <elementProp name="x-lima-original-serial" elementType="Header">
                <stringProp name="Header.name">x-lima-original-serial</stringProp>
                <stringProp name="Header.value">${lima-orginalserial}</stringProp>
              </elementProp>
              <elementProp name="x-lima-original-username" elementType="Header">
                <stringProp name="Header.name">x-lima-original-username</stringProp>
                <stringProp name="Header.value">${lima-orginalusername}</stringProp>
              </elementProp>
              <elementProp name="x-lima-serial" elementType="Header">
                <stringProp name="Header.name">x-lima-serial</stringProp>
                <stringProp name="Header.value">${lima-serial}</stringProp>
              </elementProp>
              <elementProp name="x-lima-username" elementType="Header">
                <stringProp name="Header.name">x-lima-username</stringProp>
                <stringProp name="Header.value">${lima-username}</stringProp>
              </elementProp>
              <elementProp name="x-lima-userstate" elementType="Header">
                <stringProp name="Header.name">x-lima-userstate</stringProp>
                <stringProp name="Header.value">${lima-userstate}</stringProp>
              </elementProp>
              <elementProp name="x-lima-usertype" elementType="Header">
                <stringProp name="Header.name">x-lima-usertype</stringProp>
                <stringProp name="Header.value">${lima-usertype}</stringProp>
              </elementProp>
              <elementProp name="x-limasig-dsa1024" elementType="Header">
                <stringProp name="Header.name">x-limasig-dsa1024</stringProp>
                <stringProp name="Header.value">${lima-dsa1024}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Stage" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;label&quot;:&quot;qa&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">user-version.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/versions/users/${UserName}/serials/${SerialNumber}/simple</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-fds-override-name</stringProp>
                <stringProp name="Header.value">devel</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Stage" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">user-version.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/versions/users/${UserName}/serials/${SerialNumber}/simple</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Override" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&quot;${Override}&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">user-version.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/users/${UserName}/serials/${SerialNumber}/overrides</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="x-fds-override-name" elementType="Header">
                <stringProp name="Header.name">x-fds-override-name</stringProp>
                <stringProp name="Header.value">devel</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Override" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">user-version.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/users/${UserName}/serials/${SerialNumber}/overrides</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="x-fds-override-name" elementType="Header">
                <stringProp name="Header.name">x-fds-override-name</stringProp>
                <stringProp name="Header.value">devel</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Set DB  to FF" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:&quot;\n            mutation {\n              dbOrder(activeDBs: [129,0,9,94,80,11,19,353,369]) {\n                \n      fundamental(\n        value: [\n          {id: \&quot;MTI5\&quot;, extraDBs: false}\n{id: \&quot;MzUz\&quot;, extraDBs: false}\n{id: \&quot;MA==\&quot;, extraDBs: false}\n{id: \&quot;ODA=\&quot;, extraDBs: false}\n{id: \&quot;MTE=\&quot;, extraDBs: false}\n{id: \&quot;OQ==\&quot;, extraDBs: false}\n{id: \&quot;MTk=\&quot;, extraDBs: false}\n{id: \&quot;OA==\&quot;, extraDBs: false}\n{id: \&quot;MTM=\&quot;, extraDBs: false}\n{id: \&quot;NTg=\&quot;, extraDBs: false}\n{id: \&quot;Mw==\&quot;, extraDBs: false}\n{id: \&quot;OTQ=\&quot;, extraDBs: false}\n{id: \&quot;MTI0\&quot;, extraDBs: false}\n{id: \&quot;OTY=\&quot;, extraDBs: false}\n        ]\n      ) {\n        \n  id\n  name\n  extraDBs\n  isActive\n\n      }\n    \n              }\n            }\n          &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/services/user-profile/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://my.apps.factset.com</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="X-Fds-Auth-Token" elementType="Header">
                <stringProp name="Header.name">X-Fds-Auth-Token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Set DB  to FE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:&quot;\n            mutation {\n              dbOrder(activeDBs: null) {\n                \n      estimate(\n        value: [\n          {id: \&quot;ODE=\&quot;, extraDBs: false}\n{id: \&quot;Nzg=\&quot;, extraDBs: false}\n{id: \&quot;NQ==\&quot;, extraDBs: false}\n{id: \&quot;NTg=\&quot;, extraDBs: false}\n{id: \&quot;MjQ=\&quot;, extraDBs: false}\n{id: \&quot;NTI=\&quot;, extraDBs: false}\n{id: \&quot;NjI=\&quot;, extraDBs: false}\n{id: \&quot;NjY=\&quot;, extraDBs: false}\n{id: \&quot;ODk=\&quot;, extraDBs: false}\n{id: \&quot;OTM=\&quot;, extraDBs: false}\n{id: \&quot;MTAy\&quot;, extraDBs: false}\n{id: \&quot;MTI0\&quot;, extraDBs: false}\n        ]\n      ) {\n        \n  id\n  name\n  extraDBs\n  isActive\n\n      }\n    \n              }\n            }\n          &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/services/user-profile/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://my.apps.factset.com</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="X-Fds-Auth-Token" elementType="Header">
                <stringProp name="Header.name">X-Fds-Auth-Token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - LHP - Notes to Financials - Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entityType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">entityType</stringProp>
                <stringProp name="Argument.value">publicCompany</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="retry" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">retry</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/navigator/api/company-security/LHP/0LRNVK-E</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="X-Fds-Auth-Token" elementType="Header">
                <stringProp name="Header.name">X-Fds-Auth-Token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Report Name - Notes to Financials" enabled="true">
            <stringProp name="JSON_PATH">$.LHP[0].groups[*].reports[*].id</stringProp>
            <stringProp name="EXPECTED_VALUE">.*Notes_To_Financials.*</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Toolbar -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsToolbar[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsToolbar[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceToolbar</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsToolbar[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsToolbar[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;showUnreported=0&amp;curn=LOCAL&amp;keyword=PM_WR&amp;part=1&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=1&amp;eperiod=-9&amp;id=0LRNVK-E&amp;dbCategories%5B0%5D=fundamental</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="General Account - Life\/Health" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.std_or_arpt_labels.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;General Account - Life\/Health&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Report name" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.part_labels[0]</stringProp>
            <stringProp name="EXPECTED_VALUE">Investments</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Report type drop-down" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.asset_type_labels</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Mortgage Loans, including Mezzanine Real Estate Loans&quot;,&quot;Debt Restructuring &amp; Reverse Mortgages&quot;,&quot;Loan-Backed Securities&quot;,&quot;Dollar Repurchase Agreements and\/or Securities Lending Transactions&quot;,&quot;Repurchase Agreements Transactions Accounted for as Secured Borrowing&quot;,&quot;Reverse Repurchase Agreements Transactions Accounted for as Secured Borrowing&quot;,&quot;Repurchase Agreements Transactions Accounted for as a Sale&quot;,&quot;Reverse Repurchase Agreements Transactions Accounted for as a Sale&quot;,&quot;Restricted Assets&quot;,&quot;Working Capital Finance Investments&quot;,&quot;5GI Securities&quot;,&quot;Short Sales&quot;,&quot;Prepayment Penalty and Acceleration Fees&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Asset Type" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.asset_type</stringProp>
            <stringProp name="EXPECTED_VALUE">MORT_LOAN</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Header - Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsHeaderSwitcher[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsHeaderSwitcher[componentName]</stringProp>
                <stringProp name="Argument.value">ksHeaderSwitcher</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsHeaderSwitcher[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsHeaderSwitcher[options]</stringProp>
                <stringProp name="Argument.value">rpt=RSRV&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;speriod=0&amp;eperiod=-10&amp;restated=0&amp;grthType=YOY&amp;showExpand=0&amp;showInlineCalc=1&amp;showSpark=0&amp;showGrowthTable=1&amp;showCsizeTable=0&amp;showComp=0&amp;curn=LOCAL&amp;segType=BUS&amp;keyword=PM_WR&amp;acctStd=IFCSCJNC&amp;part=1&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=1&amp;id=0LRNVK-E</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify Company name" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsHeaderSwitcher&apos;][&apos;name&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">Total US Life/Health Stock Cos (AMBDSG) (0LRNVK-E) - Private Company</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify Entity Type" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsHeaderSwitcher&apos;][&apos;entityType&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">privateCompany</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify Database " enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsHeaderSwitcher.dbNames</stringProp>
            <stringProp name="EXPECTED_VALUE">FactSet Fundamentals</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Table1 -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsTable1[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable1[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceTable</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsTable1[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable1[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;speriod=0&amp;eperiod=-10&amp;restated=0&amp;grthType=YOY&amp;showExpand=0&amp;showInlineCalc=1&amp;showSpark=0&amp;showGrowthTable=1&amp;showCsizeTable=0&amp;showComp=0&amp;curn=LOCAL&amp;segType=BUS&amp;keyword=PM_WR&amp;acctStd=IFCSCJNC&amp;part=1&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=1&amp;id=0LRNVK-E</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table headers" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable1.columnData[*].value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Current Year&quot;,&quot;Prior Year&quot;,&quot;&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table items" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable1.rowData[&quot;row-0&quot;].label.value</stringProp>
            <stringProp name="EXPECTED_VALUE">Taxes, assessments and any amounts advanced and not included in the mortgage loan total</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Main table data populates" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//This step Verify the data for 1 row
import org.apache.jmeter.util.JMeterUtils;
import groovy.json.JsonSlurper;

def responsefromStep= prev.getResponseDataAsString()

def responseJson =new JsonSlurper().parseText(responsefromStep)
log.info(&quot;responseJson=&quot;+responseJson.toString())


//Verify first 1 row of the table 
[&apos;row-0&apos;].each 
	{
 		//Verify that the data in each row is not null
 		def response = responseJson.ksNotesToFinancialsTable1.rowData[&quot;${it}&quot;].col0.value
 		log.info(&quot;response= &quot;+response.toString())
		assert response != &quot;@NaNd&quot;||null : &quot;${it} is not displaying data in the report.&quot;  
  		
  	}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Footnote" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsTable1&apos;][&apos;footnotes&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">All Figures in Millions of U.S Dollar. Source: A.M. Best Company</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Table2 -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsTable2[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable2[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceTable</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsTable2[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable2[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;speriod=0&amp;eperiod=-10&amp;restated=0&amp;grthType=YOY&amp;showExpand=0&amp;showInlineCalc=1&amp;showSpark=0&amp;showGrowthTable=1&amp;showCsizeTable=0&amp;showComp=0&amp;curn=LOCAL&amp;segType=BUS&amp;keyword=PM_WR&amp;acctStd=IFCSCJNC&amp;part=1&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=2&amp;id=0LRNVK-E</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table headers" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable2.columnData[*].value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;&quot;,&quot;&quot;,&quot;Residential&quot;,&quot;Commercial&quot;,&quot;&quot;,&quot;Farm&quot;,&quot;Insured&quot;,&quot;All Other&quot;,&quot;Insured&quot;,&quot;All Other&quot;,&quot;Mezzanine&quot;,&quot;Total&quot;,&quot;&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table items" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable2.rowData[*].label.value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Interest Accrued&quot;,&quot;Recorded Investment&quot;,&quot;Interest Accrued&quot;,&quot;Recorded Investment&quot;,&quot;Number of Loans&quot;,&quot;Recorded Investment&quot;,&quot;Current&quot;,&quot;30-59 Days Past Due&quot;,&quot;60-89 Days Past Due&quot;,&quot;90-179 Days Past Due&quot;,&quot;180+ Days Past Due&quot;,&quot;Recorded Investment&quot;,&quot;Interest Accrued&quot;,&quot;Current&quot;,&quot;Recorded Investment&quot;,&quot;Interest Accrued&quot;,&quot;Recorded Investment&quot;,&quot;Number of Loans&quot;,&quot;Recorded Investment&quot;,&quot;With Allowance for Credit Losses&quot;,&quot;30-59 Days Past Due&quot;,&quot;No Allowance for Credit Losses&quot;,&quot;Total&quot;,&quot;Subject to a participant or co-lender mortgage loan agreement for which the reporting entity is restricted from uni-laterally foreclosing on the mortgage loan&quot;,&quot;With Allowance for Credit Losses&quot;,&quot;No Allowance for Credit Losses&quot;,&quot;Total&quot;,&quot;Subject to a participant or co-lender mortgage loan agreement for which the reporting entity is restricted from uni-laterally foreclosing on the mortgage loan&quot;,&quot;60-89 Days Past Due&quot;,&quot;Average Recorded Investment&quot;,&quot;Interest Income Recognized&quot;,&quot;Recorded Investments on Nonaccrual Status&quot;,&quot;Amount of Interest Income Recognized Using a Cash-Basis Method of Accounting&quot;,&quot;Average Recorded Investment&quot;,&quot;Interest Income Recognized&quot;,&quot;Recorded Investments on Nonaccrual Status&quot;,&quot;Amount of Interest Income Recognized Using a Cash-Basis Method of Accounting&quot;,&quot;90-179 Days Past Due&quot;,&quot;180+ Days Past Due&quot;,&quot;Recorded Investment&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Main table data populates" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//This step Verify the data for 1 row
import org.apache.jmeter.util.JMeterUtils;
import groovy.json.JsonSlurper;

def responsefromStep= prev.getResponseDataAsString()

def responseJson =new JsonSlurper().parseText(responsefromStep)
log.info(&quot;responseJson=&quot;+responseJson.toString())



//Verify first 1 row of the table 
[&apos;row-3&apos;].each 
	{
 		//Verify that the data in each row is not null
 		def response = responseJson.ksNotesToFinancialsTable2.rowData[&quot;${it}&quot;].col1.value
 		log.info(&quot;response= &quot;+response.toString())
		assert response != &quot;@NaNd&quot;||null : &quot;${it} is not displaying data in the report.&quot;  
  		
  	}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Footnote" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsTable2&apos;][&apos;footnotes&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">All Figures in Millions of U.S Dollar. Source: A.M. Best Company</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Table3 -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsTable3[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable3[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceTable</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsTable3[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable3[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;speriod=0&amp;eperiod=-10&amp;restated=0&amp;grthType=YOY&amp;showExpand=0&amp;showInlineCalc=1&amp;showSpark=0&amp;showGrowthTable=1&amp;showCsizeTable=0&amp;showComp=0&amp;curn=LOCAL&amp;segType=BUS&amp;keyword=PM_WR&amp;acctStd=IFCSCJNC&amp;part=1&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=3&amp;id=0LRNVK-E</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table headers" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable3.columnData[*].value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Current Year&quot;,&quot;Prior Year&quot;,&quot;&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table items" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable3.rowData[*].label.value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Balance at beginning of period&quot;,&quot;Additions charged to operations&quot;,&quot;Direct write-downs charged against the allowances&quot;,&quot;Recoveries of amounts previously charged off&quot;,&quot;Balance at end of period&quot;,&quot;Aggregate amount of mortgage loans derecognized&quot;,&quot;Real estate collateral recognized&quot;,&quot;Other collateral recognized&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Main table data populates" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//This step Verify the data for 1 row
import org.apache.jmeter.util.JMeterUtils;
import groovy.json.JsonSlurper;

def responsefromStep= prev.getResponseDataAsString()

def responseJson =new JsonSlurper().parseText(responsefromStep)
log.info(&quot;responseJson=&quot;+responseJson.toString())


//Verify first 1 row of the table 
[&apos;row-3&apos;].each 
	{
 		//Verify that the data in each row is not null
 		def response = responseJson.ksNotesToFinancialsTable3.rowData[&quot;${it}&quot;].col1.value
 		log.info(&quot;response= &quot;+response.toString())
		assert response != &quot;@NaNd&quot;||null : &quot;${it} is not displaying data in the report.&quot;  
  		
  	}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Footnote" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsTable3&apos;][&apos;footnotes&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">All Figures in Millions of U.S Dollar. Source: A.M. Best Company</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Life Actuarial Reserves - Toolbar -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsToolbar[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsToolbar[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceToolbar</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsToolbar[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsToolbar[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;showUnreported=0&amp;curn=LOCAL&amp;keyword=PM_WR&amp;part=LIFE_ACT&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=1&amp;eperiod=-9&amp;id=0LRNVQ-E&amp;dbCategories%5B0%5D=fundamental</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid HTTP Status Codes" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="General Account - Life\/Health" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.std_or_arpt_labels.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;General Account - Life\/Health&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Report name" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.part_labels[*]</stringProp>
            <stringProp name="EXPECTED_VALUE">Life Actuarial Reserves</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Report fperiod drop-down" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsToolbar.fperiod_labels[*]</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Dec &apos;21&quot;,&quot;Dec &apos;20&quot;,&quot;Dec &apos;19&quot;,&quot;Dec &apos;18&quot;,&quot;Dec &apos;17&quot;,&quot;Dec &apos;16&quot;,&quot;Dec &apos;15&quot;,&quot;Dec &apos;14&quot;,&quot;Dec &apos;13&quot;,&quot;Dec &apos;12&quot;,&quot;Dec &apos;11&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Life Actuarial Reserves - Table1 -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsTable1[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable1[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceTable</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsTable1[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable1[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;showUnreported=0&amp;curn=LOCAL&amp;keyword=PM_WR&amp;part=LIFE_ACT&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=1&amp;eperiod=-9&amp;id=0LRNVQ-E&amp;dbCategories%5B0%5D=fundamental</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table title" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable1.title</stringProp>
            <stringProp name="EXPECTED_VALUE">Life Actuarial Reserves</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table headers" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable1.columnData[*].value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;&quot;,&quot;&quot;,&quot;General Account&quot;,&quot;&quot;,&quot;&quot;,&quot;Account Value&quot;,&quot;Cash Value&quot;,&quot;Reserve&quot;,&quot;&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table items" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable1.rowData[*].label.value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Term Policies with Cash Value&quot;,&quot;Miscellaneous Reserves&quot;,&quot;Term Policies without Cash Value&quot;,&quot;Accidental Death Benefits&quot;,&quot;Disability - Active Lives&quot;,&quot;Disability - Disables Lives&quot;,&quot;Miscellaneous Reserves&quot;,&quot;Total (gross: direct + assumed)&quot;,&quot;Reinsurance Ceded&quot;,&quot;Total (net)&quot;,&quot;Universal Life&quot;,&quot;Exhibit 5, Life Insurance Section, Total (net)&quot;,&quot;Exhibit 5, Accidental Death Benefits Section, Total (net)&quot;,&quot;Exhibit 5, Disability - Active Lives Section Total (net)&quot;,&quot;Exhibit 5, Disabilty - Disabled Lives Section, Total (net)&quot;,&quot;Exhibit 5, Miscellaneous Reserves Section, Total (net)&quot;,&quot;Subtotal&quot;,&quot;Exhibit 3, Line 0199999, Column 2&quot;,&quot;Universal Life with Secondary Guarantees&quot;,&quot;Exhibit 3, Line 0499999, Column 2&quot;,&quot;Exhibit 3, Line 0599999, Column 2&quot;,&quot;Subtotal (Lines ((7) through (9))&quot;,&quot;Indexed Universal Life&quot;,&quot;Indexed Universal Life with Secondary Guarantees&quot;,&quot;Indexed Life&quot;,&quot;Other Permanent Cash Value Life Insurance&quot;,&quot;Variable Life&quot;,&quot;Variable Universal Life&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table items label" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable1.rowData[*].label</stringProp>
            <stringProp name="EXPECTED_VALUE">Subject to discretionary withdrawal, surrender values, or policy loans.</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Footnote" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsTable1&apos;][&apos;footnotes&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">All Figures in Millions of U.S Dollar. Source: A.M. Best Company</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NotestoFinancials: Verify - Life Actuarial Reserves - Table2 -  Total US Life Health Stock Cos (AMBDSG)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ksNotesToFinancialsTable2[componentName]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable2[componentName]</stringProp>
                <stringProp name="Argument.value">ksInsuranceTable</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ksNotesToFinancialsTable2[options]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ksNotesToFinancialsTable2[options]</stringProp>
                <stringProp name="Argument.value">rpt=NTO_FINSTMT&amp;stdOrArpt=INS_PC&amp;rptType=ANN&amp;showUnreported=0&amp;curn=LOCAL&amp;keyword=PM_WR&amp;part=LIFE_ACT&amp;business=SUM&amp;assetType=BAL&amp;holdType=OWN&amp;fperiod=0&amp;state=GT&amp;decimals=-1&amp;units=AUTO&amp;component=2&amp;eperiod=-9&amp;id=0LRNVQ-E&amp;dbCategories%5B0%5D=fundamental</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">my.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/insurance-reports/api/aggr/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table headers" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable2.columnData[*].value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;&quot;,&quot;General Account&quot;,&quot;&quot;,&quot;Account Value&quot;,&quot;Cash Value&quot;,&quot;Reserve&quot;,&quot;&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Table items" enabled="true">
            <stringProp name="JSON_PATH">$.ksNotesToFinancialsTable2.rowData[*].label.value</stringProp>
            <stringProp name="EXPECTED_VALUE">[&quot;Variable Universal Life&quot;,&quot;Miscellaneous Reserves&quot;,&quot;Term Policies without Cash Value&quot;,&quot;Accidental Death Benefits&quot;,&quot;Disability - Active Lives&quot;,&quot;Disability - Disables Lives&quot;,&quot;Miscellaneous Reserves&quot;,&quot;Total (gross: direct + assumed)&quot;,&quot;Reinsurance Ceded&quot;,&quot;Term Policies with Cash Value&quot;,&quot;Total (net)&quot;,&quot;Term Policies with Cash Value&quot;,&quot;Universal Life&quot;,&quot;Universal Life with Secondary Guarantees&quot;,&quot;Indexed Universal Life&quot;,&quot;Indexed Universal Life with Secondary Guarantees&quot;,&quot;Indexed Life&quot;,&quot;Other Permanent Cash Value Life Insurance&quot;,&quot;Universal Life&quot;,&quot;Variable Life&quot;,&quot;Variable Universal Life&quot;,&quot;Miscellaneous Reserves&quot;,&quot;Term Policies without Cash Value&quot;,&quot;Accidental Death Benefits&quot;,&quot;Disability - Active Lives&quot;,&quot;Disability - Disables Lives&quot;,&quot;Miscellaneous Reserves&quot;,&quot;Total (gross: direct + assumed)&quot;,&quot;Universal Life with Secondary Guarantees&quot;,&quot;Reinsurance Ceded&quot;,&quot;Total (net)&quot;,&quot;Indexed Universal Life&quot;,&quot;Indexed Universal Life with Secondary Guarantees&quot;,&quot;Indexed Life&quot;,&quot;Other Permanent Cash Value Life Insurance&quot;,&quot;Variable Life&quot;]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Main table data populates" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//This step Verify the data for 1 row
import org.apache.jmeter.util.JMeterUtils;
import groovy.json.JsonSlurper;

def responsefromStep= prev.getResponseDataAsString()

def responseJson =new JsonSlurper().parseText(responsefromStep)
log.info(&quot;responseJson=&quot;+responseJson.toString())



//Verify first 1 row of the table 
[&apos;row-3&apos;].each 
	{
 		//Verify that the data in each row is not null
 		def response = responseJson.ksNotesToFinancialsTable2.rowData[&quot;${it}&quot;].col1.value
 		log.info(&quot;response= &quot;+response.toString())
		assert response != &quot;@NaNd&quot;||null : &quot;${it} is not displaying data in the report.&quot;  
  		
  	}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Footnote" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ksNotesToFinancialsTable2&apos;][&apos;footnotes&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">All Figures in Millions of U.S Dollar. Source: A.M. Best Company</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Override" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">user-version.apps.factset.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/users/${UserName}/serials/${SerialNumber}/overrides/${Override}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="x-datadirect-auth-token" elementType="Header">
                <stringProp name="Header.name">x-datadirect-auth-token</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="x-fds-override-name" elementType="Header">
                <stringProp name="Header.name">x-fds-override-name</stringProp>
                <stringProp name="Header.value">devel</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
